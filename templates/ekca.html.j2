{% extends htdocs_layout %}

{% block head_title %}Integrated EKCA{% endblock %}
{% block head_pagedescription %}Guide for initializing and using EKCA{% endblock %}

{% block content %}

<p>
  <strong>Intended Audience:</strong>
  All persons acting as &AElig;-DIR admins
</p>

<ol>
  <li>
    <a href="#install">Installation</a>
  </li>
  <li>
    <a href="#init">Initialization / key generation</a>
  </li>
  <li>
    <a href="#activate">Activation on start</a>
  </li>
  <li>
    <a href="#rotation">Key Rotation</a>
  </li>
</ol>

<p>
  To avoid the need for implementing an out-of-band trust process for
  authorized keys and enforce rotation of user keys it is recommended to
  issue temporary OpenSSH user certificates only valid for a limited
  time-span (e.g. a few hours). &AElig;-DIR has built-in support for that
  based on <em>EKCA - Epheremal Keys Certificate Authority</em>.
  <br>
  Combined with built-in two-factor authentication this gives you higher
  security for your SSH logins while preserving usability also when
  accessing many machines (e.g. with <em>ansible</em>).
</p>
<p>
  Note:<br>
  Using OpenSSH user certificates currently only works with OpenSSH servers
  and clients, not PuTTY or its derivates.
</p>
<p>
  See also:
</p>
<ul>
  <li>
    <a href="https://ekca.stroeder.com">EKCA project web site</a>
  </li>
  <li>
    <a href="https://www.youtube.com/watch?v=E1XP1paYIj0">
      Lightning Talk at LDAPcon 2019: EKCA - Temporary OpenSSH user certs used as login &quot;tickets&quot;
    </a>
  </li>
</ul>
<p>
  OpenSSH documentation:
</p>
<ul>
  <li>
    <a href="https://man.openbsd.org/ssh-keygen#CERTIFICATES">ssh-keygen(1) - CERTIFICATES</a>
  </li>
  <li>
    <a href="https://man.openbsd.org/sshd_config#TrustedUserCAKeys">sshd_config(5) - TrustedUserCAKeys</a>
  </li>
</ul>

<h1 id="install">Installation</h1>
<p>
  For installing EKCA on &AElig;-DIR provider set this ansible variable:
</p>
<pre class="cli">
ekca_enabled: True
</pre>
<p>
  After next <a href="install.html#server">ansible playbook run</a> two
  additional services are installed and enabled on &AElig;-DIR providers:
</p>
<dl>
  <dt>ekca-service</dt>
  <dd>
    This is a web service reachable via the web server on URL
    <var>/ekca</var>. It will authenticate the user, create the new user's
    key pair and will sign the user certificate by using the SSH key agent
    started as service <em>ekca-agent</em>.
  </dd>
  <dt>ekca-agent</dt>
  <dd>
    This service starts an
    <a href="https://man.openbsd.org/ssh-agent">ssh-agent(1)</a>
    process which listens on a certain Unix domain socket.
  </dd>
</dl>

<h1 id="init">Initialization / key generation</h1>
<p>
  SSH-CA keys are supposed to only exist on the &AElig;-DIR provider. For
  high availability you run several &AElig;-DIR providers each with its own
  SSH-CA key pair. You then distribute the public keys of all these SSH-CA as
  <a href="https://man.openbsd.org/sshd_config#TrustedUserCAKeys">trusted user authority keys</a>
  to the SSH systems.
</p>
<p>
  This avoids the need to copy private SSH-CA keys to other &AElig;-DIR
  providers. And also private key loss on one provider does not cause any
  harm because your other EKCA instances running on the other providers
  will still be able to sign user certificates.
</p>
<p>
  Note:<br>
  If you plan to use CA keys from crypto hardware (HSM) you have to
  follow the vendor-specific key-generation instructions and stick to
  security best practices recommend by the vendor.
</p>
<p>
  The SSH-CA private key is protected by a pass-phrase which you must set
  at initial key generation and provide interactively each time during
  startup. For staring the key generation you simply invoke the script
  <code>ekca-key-gen.sh</code>.
</p>
<pre class="cli">
# /opt/ae-dir/bin/ekca-key-gen.sh
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /opt/ae-dir/etc/ekca/priv/{{ ekca_name }}
Your public key has been saved in /opt/ae-dir/etc/ekca/priv/{{ ekca_name }}.pub
The key fingerprint is:
SHA256:r3&hellip;HI {{ ekca_name }} on {{ inventory_hostname }}
The key's randomart image is:
+---[RSA 4096]----+
|@*.  .           |
&hellip;
|..    oooo       |
+----[SHA256]-----+
</pre>

<h1 id="activate">Activation on start</h1>
<p>
  While service <em>ekca-agent</em> starts automatically the private key of
  the SSH-CA has to be manually loaded into the key agent by providing the key
  passphrase. This avoids having to grant any file access to any service
  and allows PKCS#11-based integration of crypto hardware (HSM).
</p>
<pre class="cli">
# /opt/ae-dir/bin/ekca-key-add.sh
Enter passphrase for /opt/ae-dir/etc/ekca/priv/{{ ekca_name }}:
Identity added: /opt/ae-dir/etc/ekca/priv/{{ ekca_name }} ({{ ekca_name }} on {{ inventory_hostname }})
ssh-rsa AA&hellip;gQ== {{ ekca_name }} on {{ inventory_hostname }}
</pre>

<h1 id="rotation">Key Rotation</h1>
<p>
  SSH-CA keys should not be used for an infinite period!
  Rather you should generate new SSH-CA key pairs at regular planned intervals.
  You can do this in a rotating manner on all &AElig;-DIR providers so that
  the risk of locking out users is low if anything goes wrong.
</p>
<p>
  For generating new SSH-CA keys (key rotation) you can simply invoke
  <code>ekca-key-gen.sh</code> again and allow it to overwrite the old SSH-CA key pair.
</p>
<p>
  Don't forget to update the trusted authority key set on all the affected SSH systems:
  Add the new generated SSH-CA key, remove the old SSH-CA key.
</p>

{% endblock content %}
